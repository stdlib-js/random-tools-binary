{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isFunction from '@stdlib/assert-is-function';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isObject from '@stdlib/assert-is-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport filledBy from '@stdlib/array-base-filled-by';\nimport everyBy from '@stdlib/array-base-every-by';\nimport join from '@stdlib/array-base-join';\nimport nullaryStrided from '@stdlib/strided-base-nullary';\nimport binary from '@stdlib/ndarray-base-binary';\nimport broadcast from '@stdlib/ndarray-base-maybe-broadcast-array';\nimport broadcastScalar from '@stdlib/ndarray-base-broadcast-scalar';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport binaryOutputDataType from '@stdlib/ndarray-base-binary-output-dtype';\nimport numel from '@stdlib/ndarray-base-numel';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport getShape from '@stdlib/ndarray-shape';\nimport getDType from '@stdlib/ndarray-dtype';\nimport getOrder from '@stdlib/ndarray-order';\nimport ndims from '@stdlib/ndarray-ndims';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar ORDINALS = [ 'First', 'Second', 'Third' ];\n\n\n// FUNCTIONS //\n\n/**\n* Performs an initial scan of a list of parameters.\n*\n* @private\n* @param {Array} params - list of parameters\n* @returns {Array} scan results\n*/\nfunction initialScan( params ) {\n\tvar out;\n\tvar p;\n\tvar o;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\t\to = {\n\t\t\t'scalar': true,\n\t\t\t'value': p,\n\t\t\t'dtype': '',\n\t\t\t'ndims': 0,\n\t\t\t'order': ''\n\t\t};\n\t\tif ( isNumber( p ) ) {\n\t\t\to.dtype = 'float64';\n\t\t} else if ( isComplexLike( p ) ) {\n\t\t\tif ( p.byteLength === 8 ) {\n\t\t\t\to.dtype = 'complex64';\n\t\t\t} else {\n\t\t\t\to.dtype = 'complex128';\n\t\t\t}\n\t\t} else if ( isndarrayLike( p ) ) {\n\t\t\to.scalar = false;\n\t\t\to.dtype = getDType( p );\n\t\t\to.ndims = ndims( p );\n\t\t\to.order = getOrder( p );\n\t\t} else {\n\t\t\to.dtype = 'generic';\n\t\t}\n\t\tout.push( o );\n\t}\n\treturn out;\n}\n\n/**\n* Checks whether all parameters are scalar compatible.\n*\n* ## Notes\n*\n* -   A parameter is scalar compatible if, and only if, the parameter value is either a zero-dimensional ndarray or already a scalar value.\n*\n* @private\n* @param {Array<Object>} params - list of parameter objects\n* @returns {boolean} boolean indicating whether all parameters are scalar compatible\n*/\nfunction isScalarCompatible( params ) {\n\tvar count;\n\tvar p;\n\tvar i;\n\n\tcount = 0;\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\t\tif ( p.scalar || p.ndims === 0 ) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn ( count === params.length );\n}\n\n/**\n* Converts a list of parameters to scalar values.\n*\n* ## Notes\n*\n* -   The function **mutates** the input array by updating parameter objects which do not already correspond to scalar parameter values.\n*\n* @private\n* @param {Array<Object>} params - list of parameter objects\n* @returns {Array<Object>} updated list\n*/\nfunction convertToScalars( params ) {\n\tvar p;\n\tvar i;\n\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\t\tif ( p.scalar === false ) {\n\t\t\tp.scalar = true;\n\t\t\tp.value = p.value.get();\n\t\t\tp.ndims = 0;\n\t\t\tp.order = '';\n\t\t}\n\t}\n\treturn params;\n}\n\n/**\n* Resolves a common memory layout from a list of parameter objects.\n*\n* @private\n* @param {Array<Object>} params - list of parameter objects\n* @returns {string} memory layout\n*/\nfunction resolveOrder( params ) {\n\tvar p;\n\tvar i;\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\n\t\t// For a binary parameter function, we simply return the layout of the first parameter having a layout, as there is no clear rationale for picking the layout of one parameter over another and picking the first one we find is as good a rationale as any other...\n\t\tif ( p.scalar === false ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn p.order;\n}\n\n/**\n* Broadcasts parameter values to an ndarray having a specified shape.\n*\n* ## Notes\n*\n* -   The function **mutates** the input array.\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {Array<Object>} params - list of parameter objects\n* @returns {Array<Object>} updated list\n*/\nfunction broadcastParameters( shape, params ) {\n\tvar ord;\n\tvar p;\n\tvar i;\n\n\tord = resolveOrder( params );\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\t\tif ( p.scalar ) {\n\t\t\tp.scalar = false;\n\t\t\tp.value = broadcastScalar( p.value, p.dtype, shape, ord );\n\t\t\tp.order = ord;\n\t\t} else {\n\t\t\tp.value = broadcast( p.value, shape ); // delegate to `broadcast` to ensure broadcast compatibility\n\t\t}\n\t\tp.ndims = shape.length;\n\t}\n\treturn params;\n}\n\n\n// MAIN //\n\n/**\n* Constructor for creating ndarrays filled with pseudorandom values drawn from a binary PRNG.\n*\n* @constructor\n* @param {Function} prng - binary pseudorandom value generator\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing a list of supported input data types for each PRNG parameter\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {Object} [options] - function options\n* @param {string} [options.order] - default memory layout\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Random} instance\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import uniform from '@stdlib/random-base-uniform';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 0.0, 1.0 );\n* // returns <ndarray>\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import uniform from '@stdlib/random-base-uniform';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 0.0, 1.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction Random( prng, idtypes, odtypes, policies, options ) {\n\tvar opts;\n\tvar i;\n\tif ( !( this instanceof Random ) ) {\n\t\tif ( arguments.length < 5 ) {\n\t\t\treturn new Random( prng, idtypes, odtypes, policies );\n\t\t}\n\t\treturn new Random( prng, idtypes, odtypes, policies, options );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'null3c', prng ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'null2y', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tif (\n\t\t\t!isCollection( idtypes[ i ] ) ||\n\t\t\tidtypes[ i ].length < 1 ||\n\t\t\t!everyBy( idtypes[ i ], isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'null43', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\topts = {\n\t\t'order': defaults.get( 'order' )\n\t};\n\tif ( arguments.length > 4 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t\tif ( !isOrder( opts.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a valid memory layout. Option: `%s`.', 'order', opts.order ) );\n\t\t\t}\n\t\t}\n\t}\n\tthis._prng = prng;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output\n\t};\n\tthis._opts = opts;\n\treturn this;\n}\n\n/**\n* Returns an ndarray filled with pseudorandom values drawn from a binary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeIntegerArray} shape - output shape\n* @param {(ndarrayLike|*)} param1 - first PRNG parameter\n* @param {(ndarrayLike|*)} param2 - second PRNG parameter\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output ndarray data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed ndarray dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an ndarray should be read-only\n* @throws {TypeError} first argument must be a valid shape\n* @throws {TypeError} must provide valid PRNG parameters\n* @throws {TypeError} PRNG parameters and the desired shape must be broadcast compatible\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import uniform from '@stdlib/random-base-uniform';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 0.0, 1.0 );\n* // returns <ndarray>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( shape, param1, param2, options ) {\n\tvar params;\n\tvar prng;\n\tvar opts;\n\tvar buf;\n\tvar err;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\tvar out;\n\tvar set;\n\tvar dt;\n\tvar st;\n\tvar p1;\n\tvar p2;\n\tvar i;\n\n\tif ( !isNonNegativeIntegerArray( shape ) && !isEmptyCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'null5o', shape ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tparams = initialScan( [ param1, param2 ] );\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tdt = params[ i ].dtype;\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. %s argument must have one of the following data types: \"%s\". Data type: `%s`.', ORDINALS[ i+1 ], join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\tFLG = isScalarCompatible( params );\n\tif ( FLG ) {\n\t\tparams = convertToScalars( params );\n\t} else {\n\t\tparams = broadcastParameters( shape, params );\n\t}\n\tp1 = params[ 0 ];\n\tp2 = params[ 1 ];\n\tprng = this._prng;\n\tdt = opts.dtype || binaryOutputDataType( p1.dtype, p2.dtype, this._policies.output ); // eslint-disable-line max-len\n\tif ( opts.order ) {\n\t\tord = opts.order;\n\t} else if ( FLG ) {\n\t\tord = this._opts.order;\n\t} else {\n\t\t// If we don't have any explicit order info, use the order of the first parameter, as no clear rationale for choosing the order of one parameter over another:\n\t\tord = p1.order;\n\t}\n\t// Handles special cases involving (1) zero-dimensional output ndarrays and (2) shapes having at least one dimension of size zero...\n\tlen = numel( shape );\n\tif ( len === 0 ) {\n\t\t// Check for a zero-dimensional shape...\n\t\tif ( shape.length === 0 ) {\n\t\t\t// If the output array is a zero-dimensional ndarray, we generate a single random variate...\n\t\t\tbuf = buffer( dt, 1 );\n\t\t\tif ( isAccessorArray( buf ) ) {\n\t\t\t\tset = accessorSetter( dt );\n\t\t\t} else {\n\t\t\t\tset = setter( dt );\n\t\t\t}\n\t\t\tset( buf, 0, prng( p1.value, p2.value ) );\n\t\t\tst = [ 0 ];\n\t\t} else {\n\t\t\t// If the output array has one or more dimensions of size zero, we avoid allocating any memory, and instead return an empty ndarray...\n\t\t\tbuf = buffer( dt, len );\n\t\t\tst = shape2strides( shape, ord );\n\t\t}\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// If provided scalar PRNG parameters, we can simply fill a linear buffer with pseudorandom values (as all pseudorandom values are drawn from the same PRNG) and then wrap as an ndarray...\n\tif ( FLG ) {\n\t\tif ( dt === 'generic' ) {\n\t\t\tbuf = filledBy( len, wrapper );\n\t\t} else {\n\t\t\tbuf = buffer( dt, len );\n\t\t\tnullaryStrided( [ buf ], [ len ], [ 1 ], wrapper );\n\t\t}\n\t\tst = shape2strides( shape, ord );\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// We've been provided ndarrays, so we need to perform element-wise iteration...\n\n\t// Allocate a data buffer:\n\tbuf = buffer( dt, len );\n\n\t// Initialize the output array:\n\tst = shape2strides( shape, ord );\n\tout = new ndarray( dt, buf, shape, st, 0, ord, opts );\n\n\t// Fill the output array with pseudorandom values:\n\tbinary( [ p1.value, p2.value, out ], prng );\n\n\treturn out;\n\n\t/**\n\t* Applies parameters to a pseudorandom number generator function.\n\t*\n\t* @private\n\t* @returns {(number|ComplexLike)} pseudorandom number\n\t*/\n\tfunction wrapper() {\n\t\treturn prng( p1.value, p2.value );\n\t}\n});\n\n/**\n* Fills an ndarray with pseudorandom values drawn from a binary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {(ndarrayLike|*)} param1 - first PRNG parameter\n* @param {(ndarrayLike|*)} param2 - second PRNG parameter\n* @param {ndarrayLike} out - output ndarray\n* @throws {TypeError} second argument must be an ndarray\n* @throws {TypeError} must provide valid PRNG parameters\n* @throws {TypeError} PRNG parameters and the output ndarray must be broadcast compatible\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {ndarray} output ndarray\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import uniform from '@stdlib/random-base-uniform';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 0.0, 1.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( param1, param2, out ) {\n\tvar params;\n\tvar pdt;\n\tvar odt;\n\tvar ord;\n\tvar sh;\n\tvar p;\n\tvar i;\n\n\tif ( !isndarrayLike( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an ndarray-like object. Value: `%s`.', out ) );\n\t}\n\tif ( isReadOnly( out ) ) {\n\t\tthrow new Error( format('null1g') );\n\t}\n\tsh = getShape( out );\n\tord = getOrder( out );\n\todt = getDType( out );\n\tif ( !contains( this._odtypes, odt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. %s argument must have one of the following data types: \"%s\". Data type: `%s`.', ORDINALS[ 2 ], join( this._odtypes, '\", \"' ), odt ) );\n\t}\n\tparams = [ param1, param2 ];\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\n\t\t// Check whether we've been provided a scalar PRNG parameter...\n\t\tif ( isNumber( p ) ) {\n\t\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\t\tpdt = 'float64';\n\t\t\tp = broadcastScalar( p, pdt, sh, ord );\n\t\t} else if ( isComplexLike( p ) ) {\n\t\t\tif ( p.byteLength === 8 ) {\n\t\t\t\tpdt = 'complex64';\n\t\t\t} else {\n\t\t\t\tpdt = 'complex128';\n\t\t\t}\n\t\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\t\tp = broadcastScalar( p, pdt, sh, ord );\n\t\t} else if ( isndarrayLike( p ) ) {\n\t\t\t// Broadcast the PRNG parameter to the desired shape:\n\t\t\tpdt = getDType( p );\n\t\t\tp = broadcast( p, sh ); // delegate to `broadcast` to ensure broadcast compatibility\n\t\t} else {\n\t\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\t\tpdt = 'generic';\n\t\t\tp = broadcastScalar( p, pdt, sh, ord );\n\t\t}\n\t\tif ( !contains( this._idtypes[ i ], pdt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. %s argument must have one of the following data types: \"%s\". Data type: `%s`.', ORDINALS[ i ], join( this._idtypes[ i ], '\", \"' ), pdt ) );\n\t\t}\n\t\tparams[ i ] = p;\n\t}\n\t// Fill the output array with pseudorandom values:\n\tparams.push( out );\n\tbinary( params, this._prng );\n\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Random;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {StringArray} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - array data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\t// Pass-through options...\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["ORDINALS","Random","prng","idtypes","odtypes","policies","options","opts","i","this","arguments","length","isFunction","TypeError","format","isCollection","everyBy","isDataType","isObject","isOutputDataTypePolicy","output","order","defaults","get","isPlainObject","hasOwnProp","isOrder","_prng","_idtypes","_odtypes","_policies","_opts","setReadOnly","prototype","shape","param1","param2","params","buf","err","len","ord","FLG","out","dt","st","p1","p2","isNonNegativeIntegerArray","isEmptyCollection","dtypes","dtype","contains","join","mode","submode","readonly","validate","p","o","scalar","value","ndims","isNumber","isComplexLike","byteLength","isndarrayLike","getDType","getOrder","push","initialScan","count","isScalarCompatible","convertToScalars","resolveOrder","broadcastScalar","broadcast","broadcastParameters","binaryOutputDataType","numel","buffer","isAccessorArray","accessorSetter","setter","shape2strides","ndarray","filledBy","wrapper","nullaryStrided","binary","pdt","odt","sh","isReadOnly","Error","getShape"],"mappings":"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"}